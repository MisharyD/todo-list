{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://todo-list/./src/components.js","webpack://todo-list/./src/manager.js","webpack://todo-list/./src/index.js"],"sourcesContent":["//has name, date, priority, subtasks, and desctiption a task. can get and change all of them\nclass Task {\n    static currentId = 0;\n    static allIds = new Array();\n\n    _subtasks = {}\n\n    constructor(name, description, date, priority, completed, parentTaskId, id)\n    {\n        //used when creating a task normally\n        if(id == null){\n            this._name = name;\n            this._description = description;\n            this._date = date;\n            this._priority = priority;\n            this._completed = completed;\n            this._parentTaskId = parentTaskId \n            this._id = Task.currentId++;\n        }\n        //used when loading data\n        else{\n            this._name = name;\n            this._description = description;\n            this._date = date;\n            this._priority = priority;\n            this._completed = completed;\n            this._parentTaskId = parentTaskId \n            this._id = parseInt(id)\n\n            //used to know what is the max id after loading all tasks\n            Task.allIds.push(parseInt(id))\n        }\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    set name(val) {\n        this._name = val;\n    }\n\n    get description() {\n        return this._description;\n    }\n\n    set description(val) {\n        this._description = val;\n    }\n\n    get date() {\n        return this._date;\n    }\n\n    set date(val) {\n        this._date = val;\n    }\n\n    get priority() {\n        return this._priority;\n    }\n\n    set priority(val) {\n        this._priority = val;\n    }\n\n    set subtasks(tasks){\n        this._subtasks = tasks;\n    }\n\n    get subtasks() {\n        return this._subtasks;\n    }\n\n    get parentTaskId(){\n        return this._parentTask;\n    }\n\n    set parentTaskId(id){\n        this._parentTask = id;\n    }\n\n    get completed(){\n        return this.completed\n    }\n\n    set completed(boolean){\n        this.completed = boolean\n    }\n\n    get id(){\n        return this._id;\n    }\n\n    addSubtask = (task) => {\n        this._subtasks[task.id] = task;\n    }\n\n    removeSubTask = (task) => {\n        delete this._subtasks[task.id]\n    }\n\n    static updateCurrentId(){\n        Task.currentId = Math.max(...Task.allIds) + 1;\n    }\n}\n\n//has name, tasks, notes. can get and change all of them\nclass List {\n    static currentId = 0;\n    static allIds = new Array();\n\n    constructor(name, id) {\n        //used when creating a list normally\n        if(id == null){\n            this._name = name;\n            this._notes = {};\n            this._tasks = {};\n            this._id = List.currentId++;\n        }\n        //used when loading data\n        else{\n            this._name = name;\n            this._notes = {};\n            this._tasks = {};\n            this._id = parseInt(id);\n            List.allIds.push(parseInt(id));\n        }\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    set name(val) {\n        this._name = val;\n    }\n\n    set tasks(tsks){\n        this._tasks = tsks;\n    }\n\n    get tasks() {\n        return this._tasks;\n    }\n\n    set notes(nts){\n        this._notes = nts;\n    }\n\n    get notes() {\n        return this._notes;\n    }\n\n    get id() {\n        return this._id;\n    }\n\n    addTask(task) {\n        this._tasks[task.id] = task;\n    }\n\n    deleteTask(task) {\n        delete this._tasks[task.id];\n    }\n\n    addNote(note) {\n        this._notes[note.id] = note;\n    }\n\n    deleteNote(note) {\n        delete this._notes[note.id];\n    }\n\n    static updateCurrentId(){\n        List.currentId = Math.max(...List.allIds) + 1;\n    }\n}\n\n//has title, description, can get and change all of them\nclass Note {\n    static currentId = 0;\n    static allIds = new Array();\n\n    constructor(name, description, id){\n        //used when creating a note normally\n        if(id == null){\n            this._name = name;\n            this._description = description;\n            this._id = Note.currentId++;\n        }\n        else{\n            this._name = name;\n            this._description = description;\n            this._id = parseInt(id);\n\n            Note.allIds.push(parseInt(id));\n        }\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    set name(val){\n        this._name = val;\n    }\n\n    get description() {\n        return this._description;\n    }\n\n    set description(val) {\n        this._description = val\n    }\n\n    get id() {\n        return this._id;\n    }\n\n    static updateCurrentId(){\n        Note.currentId = Math.max(...Note.allIds) + 1;\n    }\n}\n\nexport { Task, List, Note }","import { Task, List, Note } from  \"./components\"\n\n//acts as a save file and as task manager, contains functions for adding, deleting tasks and lists. \n//changing info about a task or a list. contains an array for all tasks, lists and notes. \nexport default class Manager {\n\n    constructor() {\n            this._allTasks = {};\n            this._allLists = {};\n            this._allNotes = {};\n    \n            this._inbox = new List(\"Inbox\");\n            this._today = new List(\"Today\");\n            this._next7 = new List(\"Next 7 Days\");\n        \n            this._allLists[this._inbox.id] = this._inbox;\n            this._allLists[this._today.id] = this._today;\n            this._allLists[this._next7.id] = this._next7;\n    }\n\n    \n    //add new task, if no list is given add to inbox. returns task id if operation done successfully. otherwise false\n    addTask({name = \"\", description = \"\", date = null, priority = null, completed = false, parentTaskId = null, id = null}, listId = null) \n    {\n        //add task to allTasks\n        const task = new Task(name, description, date, priority,completed, parentTaskId, id);\n        this._allTasks[task.id] = task;\n\n        //add task to list\n\n        //default\n        if(listId == null)\n            this._inbox.addTask(task)\n        //other list\n        else\n        {\n            const list = this._allLists[listId];\n            if (list)\n            {\n                list.addTask(task);\n                return task.id;\n            }\n            else\n                return false;\n        }\n    }\n\n    //add subtask in another task. mainTask is the parent task. returns task id if operation done successfully. otherwise false\n    addSubtask(mainTaskId, {name = \"\", description = \"\", date = null, priority = null,completed = false, parentTaskId = null, id = null})\n    {\n        const mainTask = this._allTasks[mainTaskId] \n        if(mainTask)\n        {\n            //add subtask to allTasks\n            const subtask = new Task(name, description, date, priority,completed, parentTaskId, id);\n            this._allTasks[subtask.id] = subtask;\n    \n            //add subtask to the subtask array in the maintask\n            mainTask.addSubtask(subtask);\n\n            return subtask.id;\n        }\n\n        return false;\n    }\n\n\n    //change existing task info given all information about a task. returns true if operation done successfully. otherwise false\n    changeTaskInfo(taskId, name, description, date, priority) \n    {\n        const task = this._allTasks[taskId];\n        if (task) \n        {\n            task.name = name;\n            task.description = description;\n            task.date = date;\n            task.priority = priority;\n            \n            return true;\n        }\n        else\n            return false;\n    }\n\n    \n    //add new list, returns list id\n    addList(name = \"\") \n    {\n        const list = new List(name);\n        this._allLists[list.id] = list;\n        return list.id;\n    }\n\n    //deletes list if it exists and all it's tasks and everywhere they appear in. return true if success, otherwise return false\n    deleteList(listId)\n    {\n        const list = this._allLists[listId];\n        if(list)\n        {\n            //delete the list's tasks\n\n            const tasks = list.tasks;\n            for(const taskId in tasks)\n            {\n                //delete it in other lists\n                for(const listId in this._allLists)\n                    {\n                        if(listId != list.id)\n                        this._allLists[listId].deleteTask(this._allTasks[taskId])\n                    }\n                //delete it in all tasks object\n                delete this._allTasks[taskId]\n            }\n\n            //delete notes (notes only appear in one list)\n            const notes = list.notes;\n            for(const noteId in notes)\n                delete this._allNotes[noteId]\n    \n            //delete the list \n            delete this._allLists[listId];\n\n            return true;\n        }\n        return false;\n    }\n    \n    //delete task given task id. returns true if operation done successfully. otherwise false\n    deleteTask(taskId) \n    {\n        const task = this._allTasks[taskId]\n\n        //if task exists\n        if (task) \n        {\n            //delete from subtask array or a list\n\n            //check if is it a subtask or not. subtasks belong only to parent tasks and not lists. not subtasks belong only to lists.\n            const parentTaskId = task.parentTaskId;\n            //is subtask\n            if(parentTaskId != null)\n            {\n                const parentTask = this._allTasks[parentTaskId]\n                parentTask.removeSubtask(task);\n            }\n            //not subtask, delete the task from any list that contains it\n            else\n            {\n                for(const listId in this._allLists)\n                {\n                    this._allLists[listId].deleteTask(task)\n                }\n            }\n                \n            //delete from allTasks\n            delete this._allTasks[taskId]\n\n            return true;\n        }\n        else\n            return false;\n    }\n\n    \n    //change complete boolean of task to true given task id. returns true if done successfully. otherwise false\n    completeTask(taskId)\n    {\n        const task = this._allTasks[taskId]\n        if(task)\n            {\n                task.completed(true);\n                return true;\n            }\n        return false;\n    }\n\n    //change complete boolean of task to false given task id. returns true if done successfully. otherwise false\n    uncompleteTask(taskId)\n    {\n        const task = this._allTasks[taskId]\n        if(task)\n            {\n                task.completed(false);\n                return true;\n            }\n        return false;\n    }\n\n\n    //move task from list to another list. returns true if done successfully. otherwise false\n    moveTaskFromList(taskId, fromListId, toListId) \n    {\n        //get the 2 lists\n        const fromList = this._allLists[fromListId];\n        const toList = this._allLists[toListId];\n        \n        if (fromList && toList) \n        {\n            //get task\n            const task = this._allTasks[taskId];\n            if (task) \n            {\n                //transfer\n                fromList.removeTask(task);\n                toList.addTask(task);\n                return true;\n            }\n            else\n                return false;\n        }\n        return false;\n    }\n\n    \n    //create new note and add to list, if no list is provided then add to inbox. returns note id if done successfully. otherwise false\n    addNote(name = \"\", description = \"\", listId = null) \n    {\n        const note = new Note(name, description);\n\n        //default list \n        if(listId == null)\n            this._inbox.addNote(listId)\n        //other list\n        else\n        {\n            const list = this._allLists[listId];\n            if (list)\n            {\n                //add note to the provided list\n                list.addNote(note);\n\n                //add note to note list\n                this._allNotes[note.id] = note\n                return note.id;\n            }\n            else\n                return false;\n        }\n    }\n\n    \n    //delete note given noteId and the list id that contains it. returns true if done successfully. otherwise false\n    deleteNote(noteId, listId) \n    {\n        const note = this._allNotes[noteId];\n\n        //if note exists\n        if (note) \n        {\n            //remove note from allNotes_allNotes\n            delete this._allNotes[note.id];\n\n            //delete note from list\n            const list = this._allLists[listId];\n            if(list)\n            {\n                list.removeNote(note);\n                return true;\n            }\n            else\n                return false;\n        }\n        else\n            return false;\n    }\n\n    \n    //return all list ids an array\n    getAllListIds() {\n        return Object.keys(this._allLists);\n    }\n\n    \n    //if list exists return list information including all it's tasks and notes ids, given list id, otherwise return null \n    getListInfo(listId) \n    {\n        const list = this._allLists[listId];\n\n        //if list exists, return it's info\n        if (list) {\n            return {\n                name: list.name,\n                tasks: Object.keys(list.tasks),\n                notes: Object.keys(list.notes)\n            };\n        }\n        return null;\n    }\n\n    \n    //if task exists return task's information including all it's subtasks ids, given the task id\n    getTaskInfo(taskId) \n    {\n        const task = this._allTasks[taskId];\n\n        //if task exists\n        if (task) {\n            return {\n                name: task.name,\n                description: task.description,\n                date: task.date,\n                priority: task.priority,\n                subtasks: Object.keys(task.subtasks)\n            };\n        }\n        return false;\n    }\n\n    \n    //if note exists returns it's information given it's id, otherwise return null;\n    getNoteInfo(noteId) \n    {\n        const note = this._allNotes[noteId]\n\n        //if note exists return it's information\n        if (note) \n        {\n            return {\n                name: note.name,\n                description: note.description\n            };\n        }\n        return null;\n    }\n\n    \n    //if list exists return task ids of the list given it's id. otherwise return an empty array\n    getTasksOfList(listId) \n    {\n        const list = this._allLists[listId]\n\n        //if list exists return an array of all it's tasks ids\n        if (list) {\n            return Object.keys(list.tasks)\n        }\n        return [];\n    }\n\n    \n    //if list exists return note ids of the list given it's id. otherwise return an empty array\n    getNotesOfList(listId) \n    {\n        const list = this._allLists[listId]\n\n        //if list exist return an array of all it's notes ids\n        if (list) {\n            return Object.keys(list.notes);\n        }\n        return [];\n    }\n\n    //special lists\n\n    //returns today list's id \n    get today(){\n        return this._today.id;\n    }\n\n     //returns inbox list's id \n     get inbox(){\n        return this._inbox.id;\n    }\n\n     //returns next 7 days list's id \n     get next7(){\n        return this._next7.id;\n    }\n\n    saveData()\n    {\n        const data = {\n            allTasks: this._allTasks,\n            allLists: this._allLists,\n            allNotes: this._allNotes\n        }\n\n        const jsonData = JSON.stringify(data);\n        localStorage.setItem(\"data\", jsonData); \n    }\n\n    loadData(){\n        if(!localStorage.getItem(\"data\"))\n            return;\n        \n        const data = localStorage.getItem('data');\n        const parsedData = JSON.parse(localStorage.getItem('data'));\n\n        //rehydrate tasks\n        const allTasksJson = parsedData.allTasks\n        const allTasks = {};\n    \n        for (const id in allTasksJson) {\n            const taskData = allTasksJson[id];\n        \n            //recursively reconstruct subtasks\n            const reconstructTask = (taskData) => {\n                const task = new Task(\n                    taskData._name,\n                    taskData._description,\n                    taskData._date,\n                    taskData._priority,\n                    taskData._completed,\n                    taskData._parentTaskId,\n                    taskData._id\n                );\n        \n                // Recursively reconstruct subtasks\n                for (const subtaskId in taskData._subtasks) {\n                    task.addSubtask(reconstructTask(taskData._subtasks[subtaskId]));\n                }\n        \n                return task;\n            };\n        \n            allTasks[id] = reconstructTask(taskData);\n        }\n        Task.updateCurrentId()\n\n        //rehudrate notes\n        const allNotesJson = parsedData.allNotes\n        const allNotes = {};\n        for(const noteId in allNotesJson)\n            {\n                const note = new Note(allNotesJson[noteId]._name, allNotesJson[noteId]._description, noteId);\n                allNotes[noteId] = note;\n            }\n        Note.updateCurrentId();\n\n        //rehydrate lists\n        const allListsJson = parsedData.allLists\n        const allLists = {}\n        for(const listId in allListsJson)\n            {\n                const list = new List(allListsJson[listId]._name, listId);\n                \n                //add tasks\n                for(const taskId in allListsJson[listId]._tasks)\n                        list.addTask(allTasks[taskId])\n                \n                //add notes\n                for(const noteId in allListsJson[listId]._notes)\n                    list.addNote(allNotes[noteId])\n\n                allLists[listId] = list;\n            }\n        List.updateCurrentId()\n\n        //assign instance variables to the loaded data\n        this._allTasks = allTasks;\n        this._allLists = allLists;\n        this._allNotes = allNotes;\n\n        this._inbox = this._allLists[0];\n        this._today = this._allLists[1];\n        this._next7 = this._allLists[2];\n\n    }\n}","import Manager from \"./manager\"\n\n\n//currently for command line\nconst Todo = (function ()\n    {\n        let todo = new Manager()\n        todo.loadData();\n\n        function displayMainOptions() {\n            console.log(\"Options:\");\n            console.log(\"1- Enter inbox list\");\n            console.log(\"2- Enter today list\");\n            console.log(\"3- Enter next 7 days list\");\n            console.log(\"4- Show all lists\");\n            console.log(\"5- Add new list\");\n            console.log(\"6- Delete list\");\n            console.log(\"7- Save data\");\n            console.log(\"0- Exit\");\n        \n            const choice = prompt(\"Enter your choice:\");\n            handleMainChoice(choice);\n        }\n        \n        function handleMainChoice(choice) {\n            switch (choice) {\n                case '1':\n                    enterList(todo.inbox);\n                    break;\n                case '2':\n                    enterList(todo.today);\n                    break;\n                case '3':\n                    enterList(todo.next7);\n                    break;\n                case '4':\n                    showAllLists();\n                    break;\n                case '5':\n                    addNewList();\n                case '6':\n                    deleteList();\n                case '7':\n                    saveData();\n                    break;\n                case '0':\n                    console.log(\"Goodbye!\");\n                    break;\n                default:\n                    console.log(\"Invalid choice. Try again.\");\n                    displayMainOptions();\n                    break;\n            }\n        }\n        \n        function enterList(listId) {\n            console.log(\"List Options:\");\n            console.log(\"1- Add new task\");\n            console.log(\"2- Add new note\");\n            console.log(\"3- Show all tasks and notes\");\n            console.log(\"4- Return to all options\");\n            console.log(\"5- Delete task\");\n        \n            const choice = prompt(\"Enter your choice:\");\n            handleListChoice(choice, listId);\n        }\n        \n        function handleListChoice(choice, listId) {\n            switch (choice) {\n                case '1':\n                    addNewTask(listId);\n                    break;\n                case '2':\n                    addNewNote(listId);\n                    break;\n                case '3':\n                    showAllTasksAndNotes(listId);\n                    break;\n                case '4':\n                    displayMainOptions();\n                    break;\n                case '5':\n                    deleteTask(listId)\n                    break;\n                default:\n                    console.log(\"Invalid choice. Try again.\");\n                    enterList(listId);\n                    break;\n            }\n        }\n        \n        function showAllLists() {\n            const listIds = todo.getAllListIds();\n            listIds.forEach(id => {\n                const listInfo = todo.getListInfo(id);\n                console.log(`List: ${listInfo.name} (ID: ${id})`);\n            });\n        \n            const listId = prompt(\"Enter list ID to enter it, or '-1' to return to main menu:\");\n            if (listId === '-1') {\n                displayMainOptions();\n            } else {\n                enterList(listId);\n            }\n        }\n        \n        function addNewList() {\n            const listName = prompt(\"Enter new list name:\");\n            const newListId = todo.addList(listName);\n            console.log(`New list created with ID: ${newListId}`);\n            displayMainOptions();\n        }\n        \n        function addNewTask(listId) {\n            const name = prompt(\"Enter task name:\");\n            const description = prompt(\"Enter task description:\");\n            const date = prompt(\"Enter task date (YYYY-MM-DD):\");\n            const priority = prompt(\"Enter task priority:\");\n        \n            const taskId = todo.addTask({name, description, date, priority}, listId);\n            if (taskId !== false) {\n                console.log(`Task added with ID: ${taskId}`);\n            } else {\n                console.log(\"Failed to add task.\");\n            }\n            enterList(listId);\n        }\n\n        function deleteList() {\n            const listIds = todo.getAllListIds();\n            listIds.forEach(id => {\n                const listInfo = todo.getListInfo(id);\n                console.log(`List: ${listInfo.name} (ID: ${id})`);\n            });\n            const listId = prompt(\"Enter list ID to delete:\");\n            if (todo.deleteList(listId)) {\n                console.log(`List with ID: ${listId} deleted.`);\n            } else {\n                console.log(\"Invalid list ID. Try again.\");\n            }\n            displayMainOptions();\n        }\n        \n        function addNewNote(listId) {\n            const name = prompt(\"Enter note name:\");\n            const description = prompt(\"Enter note description:\");\n        \n            const noteId = todo.addNote(name, description, listId);\n            if (noteId !== false) {\n                console.log(`Note added with ID: ${noteId}`);\n            } else {\n                console.log(\"Failed to add note.\");\n            }\n            enterList(listId);\n        }\n        \n        function showAllTasksAndNotes(listId) {\n            const listInfo = todo.getListInfo(listId);\n        \n            console.log(\"Tasks:\");\n            listInfo.tasks.forEach(taskId => {\n                const task = todo.getTaskInfo(taskId);\n                if(task)\n                    console.log(`Task: ${task.name} (ID: ${taskId})`);\n                else\n                    console.log(\"failed\");\n            });\n        \n            console.log(\"Notes:\");\n            listInfo.notes.forEach(noteId => {\n                const note = todo.getNoteInfo(noteId);\n                if(note)\n                    console.log(`Note: ${note.name} (ID: ${noteId})`);\n                else\n                    console.log(\"failed\")\n            });\n        \n            const itemId = prompt(\"Enter task/note ID to view details, or '-1' to return to list menu:\");\n            if (itemId === '-1') {\n                enterList(listId);\n            } else {\n                const task = todo.getTaskInfo(itemId);\n                if (task) {\n                    console.log(`Task: ${task.name}`);\n                    console.log(`Description: ${task.description}`);\n                    console.log(`Date: ${task.date}`);\n                    console.log(`Priority: ${task.priority}`);\n        \n                    const complete = prompt(\"Mark task as complete? (yes/no):\");\n                    if (complete.toLowerCase() === 'yes') {\n                        todo.completeTask(itemId);\n                        console.log(\"Task marked as complete.\");\n                    }\n                } else {\n                    const note = todo.getNoteInfo(itemId);\n                    if (note) {\n                        console.log(`Note: ${note.name}`);\n                        console.log(`Description: ${note.description}`);\n                    } else {\n                        console.log(\"Invalid ID. Try again.\");\n                    }\n                }\n                showAllTasksAndNotes(listId);\n            }\n        }\n\n        function deleteTask(listId)\n        {\n            const listInfo = todo.getListInfo(listId);\n        \n            console.log(\"Tasks:\");\n            listInfo.tasks.forEach(taskId => {\n                const task = todo.getTaskInfo(taskId);\n                if(task)\n                    console.log(`Task: ${task.name} (ID: ${taskId})`);\n                else\n                    console.log(\"failed\");\n            });\n        \n            let itemId = prompt(\"Enter task ID to delete or '-1' to return to list menu:\")\n            if (itemId === '-1') {\n                enterList(listId);\n            }\n            else\n            {\n                const deleted = todo.deleteTask(itemId);\n                if(deleted)\n                    console.log(\"task deleted successfully\")\n                else\n                    console.log(\"failed\")\n                enterList(listId);\n            }\n\n\n\n        }\n        \n        function saveData()\n        {\n           todo.saveData();\n           todo.loadData();\n           //displayMainOptions();\n        }\n\n        displayMainOptions();\n        \n    })();\n\n"],"names":["Task","static","Array","_subtasks","constructor","name","description","date","priority","completed","parentTaskId","id","this","_name","_description","_date","_priority","_completed","_parentTaskId","_id","currentId","parseInt","allIds","push","val","subtasks","tasks","_parentTask","boolean","addSubtask","task","removeSubTask","updateCurrentId","Math","max","List","_notes","_tasks","tsks","notes","nts","addTask","deleteTask","addNote","note","deleteNote","Note","Manager","_allTasks","_allLists","_allNotes","_inbox","_today","_next7","listId","list","mainTaskId","mainTask","subtask","changeTaskInfo","taskId","addList","deleteList","noteId","removeSubtask","completeTask","uncompleteTask","moveTaskFromList","fromListId","toListId","fromList","toList","removeTask","removeNote","getAllListIds","Object","keys","getListInfo","getTaskInfo","getNoteInfo","getTasksOfList","getNotesOfList","today","inbox","next7","saveData","data","allTasks","allLists","allNotes","jsonData","JSON","stringify","localStorage","setItem","loadData","getItem","parsedData","parse","allTasksJson","taskData","reconstructTask","subtaskId","allNotesJson","allListsJson","todo","displayMainOptions","console","log","prompt","enterList","forEach","listInfo","showAllLists","listName","newListId","addNewList","handleMainChoice","choice","addNewTask","addNewNote","showAllTasksAndNotes","itemId","handleListChoice","toLowerCase"],"sourceRoot":""}