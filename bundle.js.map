{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://todo-list/./src/components.js","webpack://todo-list/./src/manager.js","webpack://todo-list/./src/index.js"],"sourcesContent":["//has name, date, priority, subtasks, and desctiption a task. can get and change all of them\nclass Task {\n    static currentId = 0;\n\n    _subtasks = {}\n\n    constructor(name, description, date, priority, parentTaskId)\n    {\n        this._name = name;\n        this._description = description;\n        this._date = date;\n        this._priority = priority;\n        this._completed = false;\n        this._parentTaskId = parentTaskId \n        this.id = Task.currentId++;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    set name(val) {\n        this._name = val;\n    }\n\n    get description() {\n        return this._description;\n    }\n\n    set description(val) {\n        this._description = val;\n    }\n\n    get date() {\n        return this._date;\n    }\n\n    set date(val) {\n        this._date = val;\n    }\n\n    get priority() {\n        return this._priority;\n    }\n\n    set priority(val) {\n        this._priority = val;\n    }\n\n    get subtasks() {\n        return this._subtasks;\n    }\n\n    get parentTaskId(){\n        return this._parentTask;\n    }\n\n    set parentTaskId(id){\n        this._parentTask = id;\n    }\n\n    get completed(){\n        return this.completed\n    }\n\n    set completed(boolean){\n        this.completed = boolean\n    }\n\n    addSubtask = (task) => {\n        this._subtasks[task.id] = task;\n    }\n\n    removeSubTask = (task) => {\n        delete this._subtasks[task.id]\n    }\n}\n\n//has name, tasks, notes. can get and change all of them\nclass List {\n    static currentId = 0;\n\n    constructor(name) {\n        this._name = name;\n        this._notes = {};\n        this._tasks = {};\n        this._id = List.currentId++;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    set name(val) {\n        this._name = val;\n    }\n\n    get tasks() {\n        return this._tasks;\n    }\n\n    get notes() {\n        return this._notes;\n    }\n\n    get id() {\n        return this._id;\n    }\n\n    addTask(task) {\n        this._tasks[task.id] = task;\n    }\n\n    deleteTask(task) {\n        delete this._tasks[task.id];\n    }\n\n    addNote(note) {\n        this._notes[note.id] = note;\n    }\n\n    deleteNote(note) {\n        delete this._notes[note.id];\n    }\n}\n\n//has title, description, can get and change all of them\nclass Note {\n    static currentId = 0;\n\n    constructor(name, description){\n        this._name = name;\n        this._description = description;\n        this._id = Note.currentId++;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    set name(val){\n        this._name = val;\n    }\n\n    get description() {\n        return this._description;\n    }\n\n    set description(val) {\n        this._description = val\n    }\n\n    get id() {\n        return this._id;\n    }\n}\n\nexport { Task, List, Note }","import { Task, List, Note } from  \"./components\"\n\n//acts as a save file and as task manager, contains functions for adding, deleting tasks and lists. \n//changing info about a task or a list. contains an array for all tasks, lists and notes. \nexport default class Manager {\n\n    constructor() {\n        this._allTasks = {};\n        this._allLists = {};\n        this._allNotes = {};\n\n        this._today = new List(\"Today\");\n        this._inbox = new List(\"Inbox\");\n        this._next7 = new List(\"Next 7 Days\");\n        \n\n        this._allLists[this._today.id] = this._today;\n        this._allLists[this._inbox.id] = this._inbox;\n        this._allLists[this._next7.id] = this._next7;\n    }\n\n    \n    //add new task, if no list is given add to inbox. returns task id if operation done successfully. otherwise false\n    addTask({name = \"\", description = \"\", date = null, priority = null}, listId = null) \n    {\n        //add task to allTasks\n        const task = new Task(name, description, date, priority, null);\n        this._allTasks[task.id] = task;\n\n        //add task to list\n\n        //default\n        if(listId == null)\n            this._inbox.addTask(task)\n        //other list\n        else\n        {\n            const list = this._allLists[listId];\n            if (list)\n            {\n                list.addTask(task);\n                return task.id;\n            }\n            else\n                return false;\n        }\n    }\n\n\n    //add subtask in another task. mainTask is the parent task. returns task id if operation done successfully. otherwise false\n    addSubtask(mainTaskId, {name = \"\", description = \"\", date = null, priority = null})\n    {\n        const mainTask = this._allTasks[mainTaskId] \n        if(mainTask)\n        {\n            //add subtask to allTasks\n            const subtask = new Task(name, description, date, priority, mainTaskId);\n            this._allTasks[subtask.id] = subtask;\n    \n            //add subtask to the subtask array in the maintask\n            mainTask.addSubtask(subtask);\n\n            return subtask.id;\n        }\n\n        return false;\n    }\n\n\n    //change existing task info given all information about a task. returns true if operation done successfully. otherwise false\n    changeTaskInfo(taskId, name, description, date, priority) \n    {\n        const task = this._allTasks[taskId];\n        if (task) \n        {\n            task.name = name;\n            task.description = description;\n            task.date = date;\n            task.priority = priority;\n            \n            return true;\n        }\n        else\n            return false;\n    }\n\n    \n    //add new list, returns list id\n    addList(name = \"\") \n    {\n        const list = new List(name);\n        this._allLists[list.id] = list;\n        return list.id;\n    }\n\n    \n    //delete task given task id. returns true if operation done successfully. otherwise false\n    deleteTask(taskId) \n    {\n        const task = this._allTasks[taskId]\n\n        //if task exists\n        if (task) \n        {\n            //delete from subtask array or a list\n\n            //check if is it a subtask or not. subtasks belong only to parent tasks and not lists. not subtasks belong only to lists.\n            const parentTaskId = task.parentTaskId;\n            //is subtask\n            if(parentTaskId != null)\n            {\n                const parentTask = this._allTasks[parentTaskId]\n                parentTask.removeSubtask(task);\n            }\n            //not subtask, delete the task from any list that contains it\n            else\n            {\n                for(const listId in this._allLists)\n                {\n                    this._allLists[listId].deleteTask(task)\n                }\n            }\n                \n            //delete from allTasks\n            delete this._allTasks[taskId]\n\n            return true;\n        }\n        else\n            return false;\n    }\n\n    \n    //change complete boolean of task to true given task id. returns true if done successfully. otherwise false\n    completeTask(taskId)\n    {\n        const task = this._allTasks[taskId]\n        if(task)\n            {\n                task.completed(true);\n                return true;\n            }\n        return false;\n    }\n\n    //change complete boolean of task to false given task id. returns true if done successfully. otherwise false\n    uncompleteTask(taskId)\n    {\n        const task = this._allTasks[taskId]\n        if(task)\n            {\n                task.completed(false);\n                return true;\n            }\n        return false;\n    }\n\n\n    //move task from list to another list. returns true if done successfully. otherwise false\n    moveTaskFromList(taskId, fromListId, toListId) \n    {\n        //get the 2 lists\n        const fromList = this._allLists[fromListId];\n        const toList = this._allLists[toListId];\n        \n        if (fromList && toList) \n        {\n            //get task\n            const task = this._allTasks[taskId];\n            if (task) \n            {\n                //transfer\n                fromList.removeTask(task);\n                toList.addTask(task);\n                return true;\n            }\n            else\n                return false;\n        }\n        return false;\n    }\n\n    \n    //create new note and add to list, if no list is provided then add to inbox. returns note id if done successfully. otherwise false\n    addNote(name = \"\", description = \"\", listId = null) \n    {\n        const note = new Note(name, description);\n\n        //default list \n        if(listId == null)\n            this._inbox.addNote(listId)\n        //other list\n        else\n        {\n            const list = this._allLists[listId];\n            if (list)\n            {\n                //add note to the provided list\n                list.addNote(note);\n\n                //add note to note list\n                this._allNotes[note.id] = note\n                return note.id;\n            }\n            else\n                return false;\n        }\n    }\n\n    \n    //delete note given noteId and the list id that contains it. returns true if done successfully. otherwise false\n    deleteNote(noteId, listId) \n    {\n        const note = this._allNotes[noteId];\n\n        //if note exists\n        if (note) \n        {\n            //remove note from allNotes_allNotes\n            delete this._allNotes[note.id];\n\n            //delete note from list\n            const list = this._allLists[listId];\n            if(list)\n            {\n                list.removeNote(note);\n                return true;\n            }\n            else\n                return false;\n        }\n        else\n            return false;\n    }\n\n    \n    //return all list ids an array\n    getAllListIds() {\n        return Object.keys(this._allLists);\n    }\n\n    \n    //if list exists return list information including all it's tasks and notes ids, given list id, otherwise return null \n    getListInfo(listId) \n    {\n        const list = this._allLists[listId];\n\n        //if list exists, return it's info\n        if (list) {\n            return {\n                name: list.name,\n                tasks: Object.keys(list.tasks),\n                notes: Object.keys(list.notes)\n            };\n        }\n        return null;\n    }\n\n    \n    //if task exists return task's information including all it's subtasks ids, given the task id\n    getTaskInfo(taskId) \n    {\n        const task = this._allTasks[taskId];\n\n        //if task exists\n        if (task) {\n            return {\n                name: task.name,\n                description: task.description,\n                date: task.date,\n                priority: task.priority,\n                subtasks: Object.keys(task.subtasks)\n            };\n        }\n        return false;\n    }\n\n    \n    //if note exists returns it's information given it's id, otherwise return null;\n    getNoteInfo(noteId) \n    {\n        const note = this._allNotes[noteId]\n\n        //if note exists return it's information\n        if (note) \n        {\n            return {\n                name: note.name,\n                description: note.description\n            };\n        }\n        return null;\n    }\n\n    \n    //if list exists return task ids of the list given it's id. otherwise return an empty array\n    getTasksOfList(listId) \n    {\n        const list = this._allLists[listId]\n\n        //if list exists return an array of all it's tasks ids\n        if (list) {\n            return Object.keys(list.tasks)\n        }\n        return [];\n    }\n\n    \n    //if list exists return note ids of the list given it's id. otherwise return an empty array\n    getNotesOfList(listId) \n    {\n        const list = this._allLists[listId]\n\n        //if list exist return an array of all it's notes ids\n        if (list) {\n            return Object.keys(list.notes);\n        }\n        return [];\n    }\n\n    //special lists\n\n    //returns today list's id \n    get today(){\n        return this._today.id;\n    }\n\n     //returns inbox list's id \n     get inbox(){\n        return this._inbox.id;\n    }\n\n     //returns next 7 days list's id \n     get next7(){\n        return this._next7.id;\n    }\n}","import Manager from \"./manager\"\n\n\n//currently for command line\nconst Todo = (function ()\n    {\n        let todo = new Manager();\n\n        function displayMainOptions() {\n            console.log(\"Options:\");\n            console.log(\"1- Enter inbox list\");\n            console.log(\"2- Enter today list\");\n            console.log(\"3- Enter next 7 days list\");\n            console.log(\"4- Show all lists\");\n            console.log(\"5- Add new list\");\n            console.log(\"0- Exit\");\n        \n            const choice = prompt(\"Enter your choice:\");\n            handleMainChoice(choice);\n        }\n        \n        function handleMainChoice(choice) {\n            switch (choice) {\n                case '1':\n                    enterList(todo.inbox);\n                    break;\n                case '2':\n                    enterList(todo.today);\n                    break;\n                case '3':\n                    enterList(todo.next7);\n                    break;\n                case '4':\n                    showAllLists();\n                    break;\n                case '5':\n                    addNewList();\n                    break;\n                case '0':\n                    console.log(\"Goodbye!\");\n                    break;\n                default:\n                    console.log(\"Invalid choice. Try again.\");\n                    displayMainOptions();\n                    break;\n            }\n        }\n        \n        function enterList(listId) {\n            console.log(\"List Options:\");\n            console.log(\"1- Add new task\");\n            console.log(\"2- Add new note\");\n            console.log(\"3- Show all tasks and notes\");\n            console.log(\"4- Return to all options\");\n            console.log(\"5- Delete task\");\n        \n            const choice = prompt(\"Enter your choice:\");\n            handleListChoice(choice, listId);\n        }\n        \n        function handleListChoice(choice, listId) {\n            switch (choice) {\n                case '1':\n                    addNewTask(listId);\n                    break;\n                case '2':\n                    addNewNote(listId);\n                    break;\n                case '3':\n                    showAllTasksAndNotes(listId);\n                    break;\n                case '4':\n                    displayMainOptions();\n                    break;\n                case '5':\n                    deleteTask(listId)\n                    break;\n                default:\n                    console.log(\"Invalid choice. Try again.\");\n                    enterList(listId);\n                    break;\n            }\n        }\n        \n        function showAllLists() {\n            const listIds = todo.getAllListIds();\n            listIds.forEach(id => {\n                const listInfo = todo.getListInfo(id);\n                console.log(`List: ${listInfo.name} (ID: ${id})`);\n            });\n        \n            const listId = prompt(\"Enter list ID to enter it, or '-1' to return to main menu:\");\n            if (listId === '-1') {\n                displayMainOptions();\n            } else {\n                enterList(listId);\n            }\n        }\n        \n        function addNewList() {\n            const listName = prompt(\"Enter new list name:\");\n            const newListId = todo.addList(listName);\n            console.log(`New list created with ID: ${newListId}`);\n            displayMainOptions();\n        }\n        \n        function addNewTask(listId) {\n            const name = prompt(\"Enter task name:\");\n            const description = prompt(\"Enter task description:\");\n            const date = prompt(\"Enter task date (YYYY-MM-DD):\");\n            const priority = prompt(\"Enter task priority:\");\n        \n            const taskId = todo.addTask({name, description, date, priority}, listId);\n            if (taskId !== false) {\n                console.log(`Task added with ID: ${taskId}`);\n            } else {\n                console.log(\"Failed to add task.\");\n            }\n            enterList(listId);\n        }\n        \n        function addNewNote(listId) {\n            const name = prompt(\"Enter note name:\");\n            const description = prompt(\"Enter note description:\");\n        \n            const noteId = todo.addNote(name, description, listId);\n            if (noteId !== false) {\n                console.log(`Note added with ID: ${noteId}`);\n            } else {\n                console.log(\"Failed to add note.\");\n            }\n            enterList(listId);\n        }\n        \n        function showAllTasksAndNotes(listId) {\n            const listInfo = todo.getListInfo(listId);\n        \n            console.log(\"Tasks:\");\n            listInfo.tasks.forEach(taskId => {\n                const task = todo.getTaskInfo(taskId);\n                if(task)\n                    console.log(`Task: ${task.name} (ID: ${taskId})`);\n                else\n                    console.log(\"failed\");\n            });\n        \n            console.log(\"Notes:\");\n            listInfo.notes.forEach(noteId => {\n                const note = todo.getNoteInfo(noteId);\n                if(note)\n                    console.log(`Note: ${note.name} (ID: ${noteId})`);\n                else\n                    console.log(\"failed\")\n            });\n        \n            const itemId = prompt(\"Enter task/note ID to view details, or '-1' to return to list menu:\");\n            if (itemId === '-1') {\n                enterList(listId);\n            } else {\n                const task = todo.getTaskInfo(itemId);\n                if (task) {\n                    console.log(`Task: ${task.name}`);\n                    console.log(`Description: ${task.description}`);\n                    console.log(`Date: ${task.date}`);\n                    console.log(`Priority: ${task.priority}`);\n        \n                    const complete = prompt(\"Mark task as complete? (yes/no):\");\n                    if (complete.toLowerCase() === 'yes') {\n                        todo.completeTask(itemId);\n                        console.log(\"Task marked as complete.\");\n                    }\n                } else {\n                    const note = todo.getNoteInfo(itemId);\n                    if (note) {\n                        console.log(`Note: ${note.name}`);\n                        console.log(`Description: ${note.description}`);\n                    } else {\n                        console.log(\"Invalid ID. Try again.\");\n                    }\n                }\n                showAllTasksAndNotes(listId);\n            }\n        }\n\n        function deleteTask(listId)\n        {\n            const listInfo = todo.getListInfo(listId);\n        \n            console.log(\"Tasks:\");\n            listInfo.tasks.forEach(taskId => {\n                const task = todo.getTaskInfo(taskId);\n                if(task)\n                    console.log(`Task: ${task.name} (ID: ${taskId})`);\n                else\n                    console.log(\"failed\");\n            });\n        \n            let itemId = prompt(\"Enter task ID to delete or '-1' to return to list menu:\")\n            if (itemId === '-1') {\n                enterList(listId);\n            }\n            else\n            {\n                const deleted = todo.deleteTask(itemId);\n                if(deleted)\n                    console.log(\"task deleted successfully\")\n                else\n                    console.log(\"failed\")\n                enterList(listId);\n            }\n\n\n\n        }\n        \n        displayMainOptions();\n        \n    })();\n\n"],"names":["Task","static","_subtasks","constructor","name","description","date","priority","parentTaskId","this","_name","_description","_date","_priority","_completed","_parentTaskId","id","currentId","val","subtasks","_parentTask","completed","boolean","addSubtask","task","removeSubTask","List","_notes","_tasks","_id","tasks","notes","addTask","deleteTask","addNote","note","deleteNote","Note","Manager","_allTasks","_allLists","_allNotes","_today","_inbox","_next7","listId","list","mainTaskId","mainTask","subtask","changeTaskInfo","taskId","addList","removeSubtask","completeTask","uncompleteTask","moveTaskFromList","fromListId","toListId","fromList","toList","removeTask","noteId","removeNote","getAllListIds","Object","keys","getListInfo","getTaskInfo","getNoteInfo","getTasksOfList","getNotesOfList","today","inbox","next7","todo","displayMainOptions","console","log","prompt","enterList","forEach","listInfo","showAllLists","listName","newListId","addNewList","handleMainChoice","choice","addNewTask","addNewNote","showAllTasksAndNotes","itemId","handleListChoice","toLowerCase"],"sourceRoot":""}