{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://todo-list/./src/components.js","webpack://todo-list/./src/index.js","webpack://todo-list/./src/manager.js"],"sourcesContent":["//has name, date, priority, subtasks, and desctiption a task. can get and change all of them\nclass Task {\n    static currentId = 0;\n\n    _subtasks = {}\n\n    constructor(name, description, date, priority, parentTaskId)\n    {\n        this._name = name;\n        this._description = description;\n        this._date = date;\n        this._priority = priority;\n        this._completed = false;\n        this._parentTaskId = parentTaskId \n        this.id = Task.currentId++;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    set name(val) {\n        this._name = val;\n    }\n\n    get description() {\n        return this._description;\n    }\n\n    set description(val) {\n        this._description = val;\n    }\n\n    get date() {\n        return this._date;\n    }\n\n    set date(val) {\n        this._date = val;\n    }\n\n    get priority() {\n        return this._priority;\n    }\n\n    set priority(val) {\n        this._priority = val;\n    }\n\n    get subtasks() {\n        return this._subtasks;\n    }\n\n    get parentTaskId(){\n        return this._parentTask;\n    }\n\n    set parentTaskId(id){\n        this._parentTask = id;\n    }\n\n    get completed(){\n        return this.completed\n    }\n\n    set completed(boolean){\n        this.completed = boolean\n    }\n\n    addSubtask = (task) => {\n        this._subtasks[task.id] = task;\n    }\n\n    removeSubTask = (task) => {\n        delete this._subtasks[task.id]\n    }\n}\n\n//has name, tasks, notes. can get and change all of them\nclass List {\n    static currentId = 0;\n\n    constructor(name) {\n        this._name = name;\n        this._notes = {};\n        this._tasks = {};\n        this._id = List.currentId++;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    set name(val) {\n        this._name = val;\n    }\n\n    get tasks() {\n        return this._tasks;\n    }\n\n    get notes() {\n        return this._notes;\n    }\n\n    get id() {\n        return this._id;\n    }\n\n    addTask(task) {\n        this._tasks[task.id] = task;\n    }\n\n    removeTask(task) {\n        delete this._tasks[task.id];\n    }\n\n    addNote(note) {\n        this._notes[note.id] = note;\n    }\n\n    removeNote(note) {\n        delete this._notes[note.id];\n    }\n}\n\n//has title, description, can get and change all of them\nclass Note {\n    static currentId = 0;\n\n    constructor(name, description){\n        this._name = name;\n        this._description = description;\n        this._id = Note.currentId++;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    set name(val){\n        this._name = val;\n    }\n\n    get description() {\n        return this._description;\n    }\n\n    set description(val) {\n        this._description = val\n    }\n\n    get id() {\n        return this._id;\n    }\n}\n\nexport { Task, List, Note }","import Manager from \"./manager\"\n\n\n//currently for command line\nconst Todo = (function ()\n    {\n        let todo = new Manager();\n       \n    })();\n\n","import { Task, List, Note } from  \"./components\"\n\n//acts as a save file and as task manager, contains functions for adding, deleting tasks and lists. \n//changing info about a task or a list. contains an array for all tasks, lists and notes. \nexport default class Manager {\n\n    constructor() {\n        this._allTasks = {};\n        this._allLists = {};\n        this._allNotes = {};\n\n        this._today = new List(\"Today\");\n        this._inbox = new List(\"Inbox\");\n        this._next7 = new List(\"Next 7 Days\");\n        \n\n        this._allLists[this._today.id] = this._today;\n        this._allLists[this._inbox.id] = this._inbox;\n        this._allLists[this._next7.id] = this._next7;\n    }\n\n    \n    //add new task, if no list is given add to inbox. returns true if operation done successfully. otherwise false\n    addTask({name = \"\", description = \"\", date = null, priority = null}, listId = null) \n    {\n        //add task to allTasks\n        const task = new Task(name, description, date, priority, null);\n        this._allTasks[task.id] = task;\n\n        //add task to list\n\n        //default\n        if(listId == null)\n            this._inbox.addTask(task)\n        //other list\n        else\n        {\n            const list = this._allLists[listId];\n            if (list)\n            {\n                list.addTask(task);\n                return true;\n            }\n            else\n                return false;\n        }\n\n        return task.id;\n    }\n\n\n    //add subtask in another task. mainTask is the parent task.  returns true if operation done successfully. otherwise false\n    addSubtask(mainTaskId, {name = \"\", description = \"\", date = null, priority = null})\n    {\n        const mainTask = this._allTasks[mainTaskId] \n        if(mainTask)\n        {\n            //add subtask to allTasks\n            const subtask = new Task(name, description, date, priority, mainTaskId);\n            this._allTasks[subtask.id] = subtask;\n    \n            //add subtask to the subtask array in the maintask\n            mainTask.addSubtask(subtask);\n        }\n    }\n\n\n    //change existing task info given all information about a task. returns true if operation done successfully. otherwise false\n    changeTaskInfo(taskId, name, description, date, priority) \n    {\n        const task = this._allTasks[taskId];\n        if (task) \n        {\n            task.name = name;\n            task.description = description;\n            task.date = date;\n            task.priority = priority;\n            \n            return true;\n        }\n        else\n            return false;\n    }\n\n    \n    //add new list\n    addList(name = \"\") \n    {\n        const list = new List(name);\n        this._allLists[list.id];\n        return list.id;\n    }\n\n    \n    //delete task given task id. returns true if operation done successfully. otherwise false\n    deleteTask(taskId) \n    {\n        const task = this._allTasks[taskId]\n\n        //if task exists\n        if (task) \n        {\n            //delete from subtask array or a list\n\n            //check if is it a subtask or not. subtasks belong only to parent tasks and not lists. not subtasks belong only to lists.\n            const parentTaskId = task.parentTaskId;\n            //is subtask\n            if(parentTaskId != null)\n            {\n                const parentTask = this._allTasks[parentTaskId]\n                parentTask.removeSubtask(task);\n            }\n            //not subtask, delete the task from any list that contains it\n            else\n                this._allLists.forEach(list => list.removeTask(task));\n            \n            //delete from allTasks\n            delete this._allTasks[taskId]\n\n            return true;\n        }\n        else\n            return false;\n    }\n\n    \n    //change complete boolean of task to true given task id. returns true if done successfully. otherwise false\n    completeTask(taskId)\n    {\n        const task = this._allTasks[taskId]\n        if(task)\n            {\n                task.completeTask(true);\n                return true;\n            }\n        return false;\n    }\n\n    //change complete boolean of task to false given task id. returns true if done successfully. otherwise false\n    uncompleteTask(taskId)\n    {\n        const task = this._allTasks[taskId]\n        if(task)\n            {\n                task.completeTask(false);\n                return true;\n            }\n        return false;\n    }\n\n\n    //move task from list to another list. returns true if done successfully. otherwise false\n    moveTaskFromList(taskId, fromListId, toListId) \n    {\n        //get the 2 lists\n        const fromList = this._allLists[fromListId];\n        const toList = this._allLists[toListId];\n        \n        if (fromList && toList) \n        {\n            //get task\n            const task = this._allTasks[taskId];\n            if (task) \n            {\n                //transfer\n                fromList.removeTask(task);\n                toList.addTask(task);\n                return true;\n            }\n            else\n                return false;\n        }\n        return false;\n    }\n\n    \n    //create new note and add to list, if no list is provided then add to inbox. returns true if done successfully. otherwise false\n    addNote(name = \"\", description = \"\", listId = null) \n    {\n        const note = new Note(name, description);\n\n        //default list \n        if(listId == null)\n            this._inbox.addNote(listId)\n        //other list\n        else\n        {\n            const list = this._allLists[listId];\n            if (list)\n            {\n                list.addNote(note);\n                return true;\n            }\n            else\n                return false;\n        }\n\n        //add note to note list\n        this._allNotes[note.id] = note\n\n        return note.id;\n    }\n\n    \n    //delete note given noteId and the list id that contains it. returns true if done successfully. otherwise false\n    deleteNote(noteId, listId) \n    {\n        const note = this._allNotes[noteId];\n\n        //if note exists\n        if (note) \n        {\n            //remove note from allNotes_allNotes\n            delete this._allNotes[note.id];\n\n            //delete note from list\n            const list = this._allLists[listId];\n            if(list)\n            {\n                list.removeNote(note);\n                return true;\n            }\n            else\n                return false;\n        }\n        else\n            return false;\n    }\n\n    \n    //return all list ids an array\n    getAllListIds() {\n        return Object.keys(this._allLists);\n    }\n\n    \n    //if list exists return list information including all it's tasks and notes ids, given list id, otherwise return null \n    getListInfo(listId) \n    {\n        const list = this._allLists[listId];\n\n        //if list exists, return it's info\n        if (list) {\n            return {\n                name: list.name,\n                tasks: Object.keys(list.tasks),\n                notes: Object.keys(list.notes)\n            };\n        }\n        return null;\n    }\n\n    \n    //if task exists return task's information including all it's subtasks ids, given the task id\n    getTaskInfo(taskId) \n    {\n        const task = this._allTasks[taskId];\n\n        //if task exists\n        if (task) {\n            return {\n                name: task.name,\n                description: task.description,\n                date: task.date,\n                priority: task.priority,\n                subtasks: Object.keys(task.subtasks)\n            };\n        }\n        return false;\n    }\n\n    \n    //if note exists returns it's information given it's id, otherwise return null;\n    getNoteInfo(noteId) \n    {\n        const note = this._allNotes[noteId]\n\n        //if note exists return it's information\n        if (note) \n        {\n            return {\n                name: note.name,\n                description: note.description\n            };\n        }\n        return null;\n    }\n\n    \n    //if list exists return task ids of the list given it's id. otherwise return an empty array\n    getTasksOfList(listId) \n    {\n        const list = this._allLists[listId]\n\n        //if list exists return an array of all it's tasks ids\n        if (list) {\n            return Object.keys(list.tasks)\n        }\n        return [];\n    }\n\n    \n    //if list exists return note ids of the list given it's id. otherwise return an empty array\n    getNotesOfList(listId) \n    {\n        const list = this._allLists[listId]\n\n        //if list exist return an array of all it's notes ids\n        if (list) {\n            return Object.keys(list.notes);\n        }\n        return [];\n    }\n\n    //special lists\n\n    //returns today list's id \n    get today(){\n        return this._today.id;\n    }\n\n     //returns inbox list's id \n     get inbox(){\n        return this._inbox.id;\n    }\n\n     //returns next 7 days list's id \n     get next7(){\n        return this._next7.id;\n    }\n}"],"names":["Task","static","_subtasks","constructor","name","description","date","priority","parentTaskId","this","_name","_description","_date","_priority","_completed","_parentTaskId","id","currentId","val","subtasks","_parentTask","completed","boolean","addSubtask","task","removeSubTask","List","_notes","_tasks","_id","tasks","notes","addTask","removeTask","addNote","note","removeNote","Note","_allTasks","_allLists","_allNotes","_today","_inbox","_next7","listId","list","mainTaskId","mainTask","subtask","changeTaskInfo","taskId","addList","deleteTask","removeSubtask","forEach","completeTask","uncompleteTask","moveTaskFromList","fromListId","toListId","fromList","toList","deleteNote","noteId","getAllListIds","Object","keys","getListInfo","getTaskInfo","getNoteInfo","getTasksOfList","getNotesOfList","today","inbox","next7"],"sourceRoot":""}